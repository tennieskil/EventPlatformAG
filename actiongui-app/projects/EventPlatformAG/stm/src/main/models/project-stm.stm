role NONE {
  Person {
    create
    read(username), read(password), read(role)
    update(username) constrainedBy [self.username=null and self=caller]
    update(password) constrainedBy [self.password=null and self=caller]
    update(role) constrainedBy [self.role=null and self=caller and value=Role::FREEUSER]
    read(moderates)
  }

  Event {
    read(title), read(categories), read(location), read(date), read(owner) constrainedBy [not self.private]
    read(private)

  }

  Category {
    read(name), read(events), read(moderators)
  }
}

role FREEUSER {
  Person {
    read(name), read(surname), read(username), read(role), read(moderates)
    update(name), update(surname), update(username), update(password) constrainedBy [self=caller]
    read(events), read(manages), read(attends), read(requests), read(invitations), read(invites) constrainedBy [self=caller]
    add(attends) constrainedBy [(target.managedBy->includes(caller) and (self.requests->includes(target) or self=target.owner)) or (self=caller and (self.invitations->select(i | i.event=target)->size() > 0 or target.owner=null))]
    remove(attends) constrainedBy [(target.managedBy->includes(caller) and target.managedBy->excludes(self) and self.attends->includes(target)) or (caller <> target.owner and caller=self and self.attends->includes(target))]
    add(manages) constrainedBy [(target.owner=caller and (target.attendants->includes(self) or self=target.owner)) or (target.owner=null and caller=self)]
    remove(manages) constrainedBy [(target.owner=caller and target.managedBy->includes(self) and self <> target.owner) or (target.owner=null and caller=self)]
    add(events) constrainedBy [self=caller and (target.owner=self or target.owner=null)]
    remove(events) constrainedBy [self=caller and (target.owner=self or target.owner=null)]

    add(requests) constrainedBy [self=caller and (not target.private)]
    remove(requests) constrainedBy [self=caller and self.requests->includes(target)]

    add(invites) constrainedBy [(self=target.invitedBy or target.invitedBy=null) and self=caller and target.event.managedBy->includes(caller)]
    remove(invites) constrainedBy [((self=caller and target.event.managedBy->includes(caller)) or (target.invitee=caller)) and self.invites->includes(target)]
    add(invitations) constrainedBy [target.invitee=self and (target.invitedBy=caller or target.invitedBy=null) and target.event.managedBy->includes(caller)]
    remove(invitations) constrainedBy [(target.invitee=self and (self=caller or target.event.managedBy->includes(caller))) and self.invitations->includes(target)]
  }

  Event {
    create
    read(title), read(categories), read(description), read(location), read(date), read(owner) constrainedBy [(not self.private) or (self.attendants->includes(caller)) or (self.invitations->select(i | i.invitee=caller)->size()>0)]
    read(private)

    update(owner) constrainedBy [self.owner=null and caller=value]
    update(title), update(description), update(location), update(date) constrainedBy [self.managedBy->includes(caller) or self.owner=null]
    update(private) constrainedBy [self.private=null and value=false and (self.owner=caller or self.owner=null)]

    read(attendants), read(managedBy) constrainedBy [(not self.private) or (self.attendants->includes(caller)) or (self.invitations->select(i | i.invitee=caller)->size()>0)]

    add(managedBy) constrainedBy [caller=self.owner and (self.attendants->includes(target) or target=self.owner)]
    remove(managedBy) constrainedBy [(caller=self.owner) and (self.managedBy->includes(target))]

    remove(attendants) constrainedBy [((self.managedBy->includes(caller)) and (self.attendants->includes(target)) and (self.managedBy->excludes(target))) or (self.attendants->includes(target) and target=caller and target <> self.owner)]
    add(attendants) constrainedBy [(self.managedBy->includes(caller) and (self.requesters->includes(target) or self.owner=target)) or ((self.invitations->select(i | i.invitee=caller)->size()>0) and (target=caller)) or (self.owner=null and target=caller)]
  
    add(requesters) constrainedBy [(not self.private) and (caller=target)]
    remove(requesters) constrainedBy [(caller=target) and (self.requesters->includes(target))]

    add(invitations) constrainedBy [(self.managedBy->includes(caller))]
    remove(invitations) constrainedBy [(self.managedBy->includes(caller)) or ((self.invitations->includes(target)) and caller=target.invitee)]
    read(invitations) constrainedBy [(self.managedBy->includes(caller))]

    read(messageBoard) constrainedBy [self.attendants->includes(caller)]
    add(messageBoard) constrainedBy [self.attendants->includes(caller)]
    remove(messageBoard)  constrainedBy [self.managedBy->includes(caller) or target.author=caller]

    add(categories) constrainedBy [self.managedBy->includes(caller) or self.owner=null]
  }

  Category {
    read(name), read(events), read(moderators)
    add(events) constrainedBy [target.managedBy->includes(caller) or target.owner=null]
  }

  Invite {
    create
    read(invitedBy), read(invitee), read(event) constrainedBy [(self.invitee=caller) or (self.event.managedBy->includes(caller))]
    update(event) constrainedBy [self.event=null and value.managedBy->includes(caller)]
    update(invitee) constrainedBy [self.invitee=null and self.event.managedBy->includes(caller)]
    update(invitedBy) constrainedBy [self.invitedBy=null and self.event.managedBy->includes(caller) and value=caller]
  }

  Post {
    create
    read(author), read(content), read(postedAt) constrainedBy [self.postedAt.attendants->includes(caller) and (not self.locked)]
    update(flagged) constrainedBy [self.postedAt.attendants->includes(caller) and value=true and (not self.locked)]
    update(author) constrainedBy [self.author=null and value=caller and (not self.locked)]
    update(content) constrainedBy [self.content=null and self.author=caller and (not self.locked)]
    update(postedAt) constrainedBy [self.postedAt=null and self.author=caller and value.attendants->includes(caller) and (not self.locked)]
    delete constrainedBy [(self.author=caller or self.postedAt.managedBy->includes(caller)) and (not self.locked)]
  }
}

role PREMIUMUSER extends FREEUSER {
  Person {
    add(subscriptions) constrainedBy [self=caller]
    remove(subscriptions) constrainedBy [self=caller and self.subscriptions->includes(target)]
  }

  Event {
    update(private) constrainedBy [self.private=null and self.owner=caller]
  }
}

role MODERATOR extends PREMIUMUSER {
  Person {
    remove(moderates) constrainedBy [self=caller and self.moderates->includes(target)]
  }

  Event {
    read(messageBoard) constrainedBy [self.categories->intersection(caller.moderates)->size()>0]
    add(messageBoard) constrainedBy [self.categories->intersection(caller.moderates)->size()>0]
    remove(categories) constrainedBy [(self.categories->intersection(caller.moderates)->includes(target))]
  }

  Category {
    read(name), read(events), read(moderators)
    read(subscribers) constrainedBy [self.moderators->includes(caller)]
    remove(moderators) constrainedBy [self.moderators->includes(caller) and target=caller]
    remove(events) constrainedBy [self.moderators->includes(caller)]
  }

  Post {
    read(postedAt)
    read(author), read(content), read(flagged), read(locked) constrainedBy [self.postedAt.categories->intersection(caller.moderates)->size()>0]
    update(flagged) constrainedBy [self.postedAt.categories->intersection(caller.moderates)->size()>0 and (not self.locked)]
    update(postedAt) constrainedBy [self.postedAt=null and self.author=caller and value.categories->intersection(caller.moderates)->size()>0 and (not self.locked)]
    delete constrainedBy [self.postedAt.categories->intersection(caller.moderates)->size()>0 and (not self.locked)]
    update(locked) constrainedBy [self.postedAt.categories->intersection(caller.moderates)->size()>0 and self.flagged=false and value=true]
  }
}

role ADMIN extends MODERATOR{
  Person {
    delete constrainedBy [self.role <> Role::ADMIN or self=caller]
    update(password), update(role) constrainedBy [self.role <> Role::ADMIN or self=caller]
    add(moderates) constrainedBy [self.role=Role::MODERATOR]
    remove(moderates) constrainedBy [self.moderates->includes(target)]
  }

  Event {
    read(messageBoard)
    add(messageBoard)
    remove(categories) constrainedBy [self.categories->includes(target)]
  }

  Category {
    create
    delete
    update(name)
    remove(events) constrainedBy [target.categories->includes(self)]
    add(moderators) constrainedBy [target.role=Role::MODERATOR]
    remove(moderators) constrainedBy [self.moderators->includes(target)]
  }

  Post {
    read(postedAt), read(author), read(content), read(flagged), read(locked)
    update(flagged), update(postedAt), update(locked)
    delete
  }
}

// The SYSTEM role is required for test data setup
role SYSTEM {
  Person {
    fullAccess
  }
  Event {
    fullAccess
  }
  Category {
    fullAccess
  }
  Invite {
    fullAccess
  }
}
